{"ast":null,"code":"var _jsxFileName = \"/Users/cbatsoula/_exp_/waveson/test-waveson-api/client/src/containers/Notes.js\";\nimport React from 'react';\nimport NoteCard from '../components/NoteCard';\nimport Banner from '../components/Banner';\nimport AllNotesFilter from './AllNotesFilter';\nimport AllNotes from './AllNotes';\n\nclass Notes extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      allNotes: null,\n      sortedNotes: null,\n      //filter\n      selectBeach: null,\n      toggle: false\n    };\n\n    this.renderNoteCards = () => {\n      if (this.state.allNotes && this.state.selectBeach === \"all\") {\n        return this.state.allNotes.map(note => {\n          return /*#__PURE__*/React.createElement(NoteCard, {\n            allBeaches: this.props.allBeaches,\n            note: note,\n            key: note.id,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 21,\n              columnNumber: 16\n            }\n          });\n        });\n      }\n    };\n\n    this.componentDidMount = () => {\n      console.log(\"allBeaches\", this.props); // let thisOne = this.props.allBeaches.find(beach => {\n      //   return beach.name === this.props.currentBeach.name\n      // })\n\n      let userID = this.props.currentUser.id;\n      console.log(\"userID\", userID);\n      fetch('/api/notes').then(r => r.json()).then(stuff => {\n        // let findFromNotes = stuff.filter( note => {\n        //   return note.beach_id === thisOne.id && note.user_id === userID})\n        let findFromNotes = stuff.filter(note => {\n          return note.user_id === userID;\n        });\n        console.log(\"pls\", findFromNotes); // debugger;\n\n        this.setState({\n          allNotes: findFromNotes\n        }, () => {\n          console.log(\"fetchNotes\", this.state.allNotes, userID);\n        });\n      });\n    };\n\n    this.handleChange = event => {\n      console.log(\"event\", event.target);\n      this.setState({\n        selectBeach: event.target.value,\n        sortedNotes: null,\n        toggle: false\n      }, () => {\n        console.log(\"handleChange\", this.state);\n      });\n    };\n\n    this.handleSubmit = event => {\n      event.preventDefault();\n      console.log(\"submit!!\", this.state, this.props);\n\n      if (this.state.selectBeach === \"all\") {\n        console.log(\"SUBMIT!! ALL beaches\", this.state);\n      }\n\n      let holdMe = [];\n      let theseNotes = this.state.allNotes.map(note => {\n        if (note.beach_name === this.state.selectBeach) {\n          console.log(\"yah\", note);\n          holdMe.push(note);\n          console.log(\"holdMe\", holdMe);\n          return note;\n        } else {\n          console.log(\"nah\", note);\n        }\n      });\n      console.log(\"theseNotes\", theseNotes, this.state, holdMe);\n      this.setState({\n        sortedNotes: holdMe,\n        toggle: true\n      });\n    };\n\n    this.renderSortedNoteCards = () => {\n      if (this.state.sortedNotes.length > 0) {\n        return this.state.sortedNotes.map(note => {\n          return /*#__PURE__*/React.createElement(NoteCard, {\n            allBeaches: this.props.allBeaches,\n            note: note,\n            key: note.id,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 16\n            }\n          });\n        });\n      } else {\n        return /*#__PURE__*/React.createElement(\"h3\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 14\n          }\n        }, \" No notes for the selected parameters \");\n      }\n    };\n  }\n\n  render() {\n    console.log(\"Notes\", this.state);\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"Banner\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Banner, {\n      title: \"All Notes\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 7\n      }\n    })), /*#__PURE__*/React.createElement(AllNotesFilter, {\n      selectBeach: this.state.selectBeach,\n      allBeaches: this.props.allBeaches,\n      allNotes: this.state.allNotes,\n      handleChange: this.handleChange,\n      handleSubmit: this.handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"Note-Container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 7\n      }\n    }, this.state.toggle ? this.renderSortedNoteCards() : this.renderNoteCards(), /*#__PURE__*/React.createElement(AllNotes, {\n      selectBeach: this.state.selectBeach,\n      allNotes: this.state.allNotes,\n      sortedNotes: this.state.sortedNotes,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }\n    })));\n  }\n\n}\n\nexport default Notes;","map":{"version":3,"sources":["/Users/cbatsoula/_exp_/waveson/test-waveson-api/client/src/containers/Notes.js"],"names":["React","NoteCard","Banner","AllNotesFilter","AllNotes","Notes","Component","state","allNotes","sortedNotes","selectBeach","toggle","renderNoteCards","map","note","props","allBeaches","id","componentDidMount","console","log","userID","currentUser","fetch","then","r","json","stuff","findFromNotes","filter","user_id","setState","handleChange","event","target","value","handleSubmit","preventDefault","holdMe","theseNotes","beach_name","push","renderSortedNoteCards","length","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport NoteCard from '../components/NoteCard';\nimport Banner from '../components/Banner';\nimport AllNotesFilter from './AllNotesFilter';\nimport AllNotes from './AllNotes';\n\nclass Notes extends React.Component {\n\n  state = {\n    allNotes: null,\n    sortedNotes: null,\n    //filter\n    selectBeach: null,\n    toggle: false,\n\n  }\n\n  renderNoteCards = () => {\n    if (this.state.allNotes && this.state.selectBeach === \"all\") {\n      return this.state.allNotes.map( note => {\n        return <NoteCard allBeaches={this.props.allBeaches} note={note} key={note.id} />\n      })\n\n    }\n  }\n\n  componentDidMount = () => {\n\n    console.log(\"allBeaches\", this.props)\n\n      // let thisOne = this.props.allBeaches.find(beach => {\n      //   return beach.name === this.props.currentBeach.name\n      // })\n      let userID = this.props.currentUser.id\n      console.log(\"userID\", userID)\n      fetch('/api/notes')\n        .then( r => r.json())\n        .then( stuff => {\n          // let findFromNotes = stuff.filter( note => {\n          //   return note.beach_id === thisOne.id && note.user_id === userID})\n          let findFromNotes = stuff.filter( note => {\n            return note.user_id === userID\n          })\n          console.log(\"pls\", findFromNotes)\n          // debugger;\n\n\n          this.setState({\n            allNotes: findFromNotes\n          }, () => {console.log(\"fetchNotes\", this.state.allNotes, userID)})\n\n        })\n\n  }\n\n  handleChange = (event) => {\n    console.log(\"event\", event.target)\n    this.setState({\n      selectBeach: event.target.value,\n      sortedNotes: null,\n      toggle: false,\n    }, () => {console.log(\"handleChange\", this.state)});\n\n  }\n\n  //upon submit, i want to setState for the array of notes to pass down as props to AllNotes\n  //within AllNotes I want to map over each note and spit out a NoteCard comp. for each one. within this I should make an, if the case is \"All\" to map and return NoteCards, else, map and render sortedNotes as NoteCards\n\n\n  handleSubmit = (event) => {\n\n    event.preventDefault();\n    console.log(\"submit!!\", this.state, this.props);\n\n    if (this.state.selectBeach === \"all\"){\n      console.log(\"SUBMIT!! ALL beaches\", this.state)\n    }\n    let holdMe = []\n    let theseNotes = this.state.allNotes.map(note => {\n      if (note.beach_name === this.state.selectBeach){\n        console.log(\"yah\", note)\n        holdMe.push(note)\n        console.log(\"holdMe\", holdMe)\n        return note\n      } else {\n        console.log(\"nah\", note)\n      }\n    })\n    console.log(\"theseNotes\", theseNotes, this.state, holdMe)\n\n    this.setState({\n      sortedNotes: holdMe,\n      toggle: true,\n    })\n  }\n\n  renderSortedNoteCards = () => {\n    if (this.state.sortedNotes.length > 0) {\n      return this.state.sortedNotes.map( note => {\n        return <NoteCard allBeaches={this.props.allBeaches} note={note} key={note.id} />\n      })\n    } else {\n      return <h3> No notes for the selected parameters </h3>\n    }\n  }\n\n  render () {\n    console.log(\"Notes\", this.state)\n    return (\n      <>\n      <div className=\"Banner\">\n      <Banner title={\"All Notes\"} />\n      </div>\n\n      <AllNotesFilter selectBeach={this.state.selectBeach} allBeaches={this.props.allBeaches} allNotes={this.state.allNotes} handleChange={this.handleChange} handleSubmit={this.handleSubmit}/>\n\n\n      <div className=\"Note-Container\">\n        {\n          this.state.toggle\n          ?\n          this.renderSortedNoteCards()\n          :\n          this.renderNoteCards()\n        }\n\n        <AllNotes selectBeach={this.state.selectBeach} allNotes={this.state.allNotes} sortedNotes={this.state.sortedNotes} />\n      </div>\n      </>\n\n    )\n  }\n}\n\nexport default Notes;\n"]},"metadata":{},"sourceType":"module"}