{"ast":null,"code":"var _jsxFileName = \"/Users/cbatsoula/_exp_/test-waveson-client/src/App.js\";\nimport React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport logo from \"./logo.svg\";\nimport Loader from './components/Loader';\nimport './App.css';\nimport Nav from './components/Nav';\nimport MainContainer from './containers/MainContainer';\nimport SignUp from './containers/SignUp';\nimport Login from './containers/Login';\nimport Show from './containers/Show';\nimport Map from './components/Map';\nimport AllNotes from './containers/AllNotes'; // import { Link } from 'react-router-dom';\n//find exactly what headers google wants to fully fix this\n// const API = `https://cors-anywhere.herokuapp.com/https://maps.googleapis.com/maps/api/place/nearbysearch/json?location=${userLat},${userLng}&radius=20000&type=natural_feature&keyword=beach&key=AIzaSyDA0kZdff9Oi6T6PM7nKwVG92c3uELsbRE`\n\nconst API_KEY = \"\".concat(process.env.REACT_APP_GOOGLE_API_KEY);\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      beachData: [],\n      userLoc: {},\n      currentUser: null,\n      currentBeach: null,\n      allBeaches: [],\n      allNotes: null,\n      beachSaveData: null,\n      theFavs: null\n    };\n\n    this.fetchNotes = () => {\n      // let thisOne = this.state.allBeaches.find(beach => {\n      //   return beach.name === this.state.currentBeach.name\n      // })\n      // let userID = this.state.currentUser.id\n      fetch('http://localhost:3000/notes').then(r => r.json()).then(stuff => {\n        // let findFromNotes = stuff.filter( note => {\n        //   return note.beach_id === thisOne.id && note.user_id === userID})\n        // console.log(\"pls\", findFromNotes)\n        // debugger;\n        this.setState({\n          allNotes: stuff\n        });\n      });\n    };\n\n    this.selectBeach = propsName => {\n      console.log(\"HELL YEAH\", propsName);\n      console.log(\"why\", this.state);\n      let selectedBeach = this.state.beachData.results.find(beach => {\n        return beach.name === propsName;\n      });\n      this.setState({\n        currentBeach: selectedBeach\n      }, () => {\n        this.props.history.push('/beach');\n      });\n    };\n\n    this.fetchFavs = () => {\n      fetch('http://localhost:3000/favs').then(r => r.json()).then(data => {\n        // console.log(\"wtf my dude\", data)\n        this.setState({\n          beachSaveData: data\n        }, () => this.doTheThing());\n      });\n    };\n\n    this.signUpUser = input => {\n      if (input.password === input.passwordConfirmation) {\n        fetch('http://localhost:3000/signup', {\n          method: \"POST\",\n          headers: {\n            'Content-Type': 'application/json',\n            'Accept': 'application/json'\n          },\n          body: JSON.stringify({\n            name: input.name,\n            username: input.username,\n            password: input.password\n          })\n        }).then(r => r.json()).then(response => {\n          if (response.errors) {\n            alert(response.errors);\n          } else {\n            // this.setState({\n            //   currentUser: {...response},\n            // })\n            this.setUser(response);\n          }\n        });\n      } else {\n        alert(\"Passwords don't match!\");\n      }\n    };\n\n    this.loginUser = input => {\n      fetch('http://localhost:3000/login', {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": 'application/json',\n          \"Accept\": 'application/json'\n        },\n        body: JSON.stringify({\n          username: input.username,\n          password: input.password\n        })\n      }).then(resp => resp.json()).then(response => {\n        if (response.errors) {\n          alert(response.errors);\n        } else {\n          this.setState({\n            currentUser: response // loading: false\n\n          }, () => {\n            this.props.history.push('/home');\n          });\n        }\n      });\n    };\n\n    this.setUser = response => {\n      this.setState({\n        currentUser: response\n      }, () => {\n        // console.log(\"THIS!!!!!\", this.props)\n        // localStorage.token = response.token\n        this.props.history.push(\"/home\");\n      });\n    };\n\n    this.logout = () => {\n      this.setState({\n        currentUser: null\n      });\n      this.props.history.push(\"/login\");\n    };\n\n    this.doTheThing = () => {\n      const finalArray = [];\n      let arr1 = this.state.allBeaches.map(beach => {\n        return beach;\n      });\n      let arr2 = this.state.beachSaveData.map(fav => {\n        return fav;\n      }); // debugger\n\n      if (this.state.currentUser) {\n        let userID = this.state.currentUser.id;\n        arr1.forEach(e1 => arr2.forEach(e2 => {\n          if (e1.id === e2.beach_id && userID === e2.user_id) {\n            // debugger;\n            finalArray.push(e1);\n          }\n        }));\n        return finalArray; // console.log(\"final array\", finalArray)\n\n        console.log(\"ONLY FUCKING NOW MY DUDE?\");\n        this.setState({\n          theFavs: finalArray\n        }, () => {\n          console.log(\"ONLY FUCKING NOW MY DUDE?\", this.state.theFavs);\n        });\n      }\n    };\n\n    this.saveBeach = () => {\n      console.log(\"you got this!\", this.state.currentUser, this.state.currentBeach);\n      let thisOne = this.state.allBeaches.find(beach => {\n        return beach.name === this.state.currentBeach.name;\n      });\n      let userID = this.state.currentUser.id;\n      console.log(\"save beach\", thisOne);\n      let favCheck = this.doTheThing().find(beach => {\n        return beach.id === thisOne.id;\n      }); // let favCheck = this.state.beachSaveData.find(beach => {\n      //   return beach.id === thisOne.id && beach.user_id === userID})\n\n      console.log(\"wut\", thisOne && !favCheck); // debugger;\n\n      if (thisOne && !favCheck) {\n        fetch('http://localhost:3000/favs', {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            \"Accept\": \"application/json\"\n          },\n          body: JSON.stringify({\n            user_id: this.state.currentUser.id,\n            beach_id: thisOne.id\n          })\n        }).then(r => r.json()).then(data => {\n          this.fetchFavs();\n        });\n      }\n    };\n\n    this.removeBeach = () => {\n      console.log(\"remove\", this.state.beachSaveData);\n      let userID = this.state.currentUser.id;\n      let thisOne = this.state.allBeaches.find(beach => {\n        return beach.name === this.state.currentBeach.name;\n      });\n      let favID = this.state.beachSaveData.find(fav => {\n        return fav.user_id === userID && fav.beach_id === thisOne.id; // console.log(\"remove favID\", favID)\n      });\n      fetch(\"http://localhost:3000/favs/\".concat(favID.id), {\n        method: \"DELETE\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Access-Control-Allow-Methods\": \"DELETE\",\n          \"Access-Control-Allow-Origin\": \"http://localhost\" //   \"Accept\": \"application/json\",\n\n        }\n      }).then(r => r.json()).then(data => {\n        this.fetchFavs();\n      });\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"https://www.googleapis.com/geolocation/v1/geolocate?key=\".concat(API_KEY), {\n      method: \"POST\"\n    }).then(r => r.json()).then(data => {\n      this.setState({\n        userLoc: data.location\n      }, () => {\n        this.beachesFromUserLoc();\n      });\n    });\n    fetch('http://localhost:3000/beaches').then(r => r.json()).then(allBeaches => {\n      this.setState({\n        allBeaches: allBeaches\n      });\n    });\n    this.fetchFavs();\n    fetch('http://localhost:3000/notes').then(r => r.json()).then(stuff => {\n      // let findFromNotes = stuff.filter( note => {\n      //   return note.beach_id === thisOne.id && note.user_id === userID})\n      // console.log(\"pls\", findFromNotes)\n      // debugger;\n      this.setState({\n        allNotes: stuff\n      });\n    });\n  }\n\n  beachesFromUserLoc() {\n    let userLat = this.state.userLoc.lat.toString();\n    let userLng = this.state.userLoc.lng.toString();\n    fetch(\"https://cors-anywhere.herokuapp.com/https://maps.googleapis.com/maps/api/place/nearbysearch/json?location=\".concat(userLat, \",\").concat(userLng, \"&radius=21000&type=natural_feature&keyword=beach&key=\").concat(API_KEY), {\n      headers: {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*'\n      }\n    }).then(r => r.json()).then(data => {\n      this.setState({\n        beachData: data\n      }, () => {\n        this.postBeaches();\n      });\n    });\n  }\n\n  postBeaches() {\n    this.state.beachData.results.map(beach => {\n      return fetch('http://localhost:3000/beaches', {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Accept\": \"application/json\" // 'Access-Control-Allow-Origin': '*'\n\n        },\n        body: JSON.stringify({\n          name: beach.name,\n          lat: beach.geometry.location.lat,\n          vicinity: beach.vicinity,\n          lng: beach.geometry.location.lng\n        })\n      }).then(r => r.json()).then(console.log);\n    });\n  }\n\n  render() {\n    console.log(\"app\", this.state); // console.log(\"beach info\", this.state.beachData.results)\n\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 323\n      },\n      __self: this\n    }, React.createElement(Nav, {\n      logout: this.logout,\n      currentUser: this.state.currentUser,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 324\n      },\n      __self: this\n    }), React.createElement(Switch, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 326\n      },\n      __self: this\n    }, React.createElement(Route, {\n      path: \"/signup\",\n      render: () => React.createElement(SignUp, {\n        setUser: this.setUser,\n        signUpUser: this.signUpUser,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 328\n        },\n        __self: this\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 328\n      },\n      __self: this\n    }), this.state.beachData ? React.createElement(\"div\", {\n      className: \"Loader\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 332\n      },\n      __self: this\n    }) : React.createElement(Route, {\n      path: \"/login\",\n      render: routerProps => React.createElement(Login, Object.assign({}, routerProps, {\n        loginUser: this.loginUser,\n        beachData: this.state.beachData,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 334\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 334\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"/map\",\n      component: Map,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 337\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"/beach\",\n      render: routerProps => React.createElement(Show, Object.assign({}, routerProps, {\n        currentBeach: this.state.currentBeach,\n        currentUser: this.state.currentUser,\n        allBeaches: this.state.allBeaches,\n        beachSaveData: this.state.beachSaveData,\n        doTheThing: this.doTheThing,\n        theFavs: this.doTheThing(),\n        saveBeach: this.saveBeach,\n        removeBeach: this.removeBeach,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 338\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 338\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"/notes\",\n      render: routerProps => React.createElement(AllNotes, Object.assign({}, routerProps, {\n        fetchNotes: this.fetchNotes,\n        currentUser: this.state.currentUser,\n        allNotes: this.state.allNotes,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 340\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 340\n      },\n      __self: this\n    })), React.createElement(Route, {\n      exact: true,\n      path: \"/home\",\n      render: routerProps => React.createElement(MainContainer, Object.assign({}, routerProps, {\n        selectBeach: this.selectBeach,\n        beachData: this.state.beachData.results,\n        allBeaches: this.state.allBeaches,\n        beachSaveData: this.state.beachSaveData,\n        currentUser: this.state.currentUser,\n        doTheThing: this.doTheThing,\n        theFavs: this.doTheThing(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 343\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 343\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"Loader\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 344\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/cbatsoula/_exp_/test-waveson-client/src/App.js"],"names":["React","BrowserRouter","Router","Route","Switch","Loader","Nav","MainContainer","SignUp","Login","Show","Map","AllNotes","API_KEY","process","env","REACT_APP_GOOGLE_API_KEY","App","Component","state","beachData","userLoc","currentUser","currentBeach","allBeaches","allNotes","beachSaveData","theFavs","fetchNotes","fetch","then","r","json","stuff","setState","selectBeach","propsName","console","log","selectedBeach","results","find","beach","name","props","history","push","fetchFavs","data","doTheThing","signUpUser","input","password","passwordConfirmation","method","headers","body","JSON","stringify","username","response","errors","alert","setUser","loginUser","resp","logout","finalArray","arr1","map","arr2","fav","userID","id","forEach","e1","e2","beach_id","user_id","saveBeach","thisOne","favCheck","removeBeach","favID","componentDidMount","location","beachesFromUserLoc","userLat","lat","toString","userLng","lng","postBeaches","geometry","vicinity","render","routerProps"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport logo from './logo.svg';\nimport Loader from './components/Loader'\nimport './App.css';\nimport Nav from './components/Nav';\nimport MainContainer from './containers/MainContainer';\nimport SignUp from './containers/SignUp';\nimport Login from './containers/Login';\nimport Show from './containers/Show';\nimport Map from './components/Map';\nimport AllNotes from './containers/AllNotes';\n\n\n// import { Link } from 'react-router-dom';\n  //find exactly what headers google wants to fully fix this\n  // const API = `https://cors-anywhere.herokuapp.com/https://maps.googleapis.com/maps/api/place/nearbysearch/json?location=${userLat},${userLng}&radius=20000&type=natural_feature&keyword=beach&key=AIzaSyDA0kZdff9Oi6T6PM7nKwVG92c3uELsbRE`\n  const API_KEY = `${process.env.REACT_APP_GOOGLE_API_KEY}`\n\n\nclass App extends React.Component {\n\n  state = {\n    beachData: [],\n    userLoc: {},\n    currentUser: null,\n    currentBeach: null,\n    allBeaches: [],\n    allNotes: null,\n    beachSaveData: null,\n    theFavs: null,\n  }\n\n\n  fetchNotes = () => {\n    // let thisOne = this.state.allBeaches.find(beach => {\n    //   return beach.name === this.state.currentBeach.name\n    // })\n    // let userID = this.state.currentUser.id\n    fetch('http://localhost:3000/notes')\n      .then( r => r.json())\n      .then( stuff => {\n        // let findFromNotes = stuff.filter( note => {\n        //   return note.beach_id === thisOne.id && note.user_id === userID})\n        // console.log(\"pls\", findFromNotes)\n        // debugger;\n\n        this.setState({\n          allNotes: stuff\n        })\n\n      })\n  }\n\n  selectBeach = (propsName) => {\n    console.log(\"HELL YEAH\", propsName)\n    console.log(\"why\", this.state)\n    let selectedBeach = this.state.beachData.results.find(beach => {\n      return beach.name === propsName\n    })\n    this.setState({\n      currentBeach: selectedBeach\n    }, () => {this.props.history.push('/beach')})\n\n  }\n\n  fetchFavs = () => {\n    fetch('http://localhost:3000/favs')\n      .then( r => r.json())\n      .then( data => {\n          // console.log(\"wtf my dude\", data)\n        this.setState({\n          beachSaveData: data\n        }, () => this.doTheThing())\n      })\n  }\n\n  componentDidMount() {\n\n    fetch(`https://www.googleapis.com/geolocation/v1/geolocate?key=${API_KEY}`, {\n      method: \"POST\"\n    })\n      .then(r => r.json())\n      .then(data => {\n        this.setState({\n          userLoc: data.location\n        }, () => {this.beachesFromUserLoc()})\n      })\n    fetch('http://localhost:3000/beaches')\n      .then( r => r.json())\n      .then( allBeaches => {\n        this.setState({\n          allBeaches: allBeaches\n        })\n      })\n    this.fetchFavs()\n    fetch('http://localhost:3000/notes')\n      .then( r => r.json())\n      .then( stuff => {\n          // let findFromNotes = stuff.filter( note => {\n          //   return note.beach_id === thisOne.id && note.user_id === userID})\n          // console.log(\"pls\", findFromNotes)\n          // debugger;\n\n        this.setState({\n          allNotes: stuff\n        })\n\n      })\n  }\n\n  beachesFromUserLoc() {\n    let userLat = this.state.userLoc.lat.toString()\n    let userLng = this.state.userLoc.lng.toString()\n\n    fetch(`https://cors-anywhere.herokuapp.com/https://maps.googleapis.com/maps/api/place/nearbysearch/json?location=${userLat},${userLng}&radius=21000&type=natural_feature&keyword=beach&key=${API_KEY}`, {\n      headers: {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*'\n      },\n    })\n      .then(r => r.json())\n      .then(data => {\n        this.setState({\n          beachData: data\n        }, () => {this.postBeaches()})\n      })\n  }\n\n  postBeaches() {\n    this.state.beachData.results.map(beach => {\n      return fetch('http://localhost:3000/beaches', {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Accept\": \"application/json\",\n        // 'Access-Control-Allow-Origin': '*'\n      },\n      body: JSON.stringify({\n        name: beach.name,\n        lat: beach.geometry.location.lat,\n        vicinity: beach.vicinity,\n        lng: beach.geometry.location.lng\n      })\n    })\n      .then(r => r.json())\n      .then(console.log)\n    })\n  }\n\n  signUpUser = (input) => {\n    if (input.password === input.passwordConfirmation) {\n      fetch('http://localhost:3000/signup', {\n        method: \"POST\",\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json'\n        },\n        body: JSON.stringify({\n          name: input.name,\n          username: input.username,\n          password: input.password\n        })\n      })\n      .then(r => r.json())\n      .then(response => {\n        if (response.errors){\n          alert(response.errors)\n        } else {\n          // this.setState({\n          //   currentUser: {...response},\n          // })\n          this.setUser(response)\n        }\n      })\n    } else {\n      alert(\"Passwords don't match!\")\n    }\n\n  }\n\n\n  loginUser = (input) => {\n    fetch('http://localhost:3000/login', {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": 'application/json',\n        \"Accept\": 'application/json'\n      },\n      body: JSON.stringify({\n        username: input.username,\n        password: input.password\n      })\n    })\n    .then(resp => resp.json())\n    .then(response => {\n      if (response.errors) {\n        alert(response.errors)\n      } else {\n        this.setState({\n          currentUser: response,\n          // loading: false\n        }, () => {this.props.history.push('/home')})\n      }\n    })\n  }\n\n  setUser = (response) => {\n    this.setState({\n      currentUser: response\n    }, () => {\n      // console.log(\"THIS!!!!!\", this.props)\n      // localStorage.token = response.token\n      this.props.history.push(\"/home\")\n    })\n  }\n\n\n  logout = () => {\n    this.setState({\n      currentUser: null\n    })\n    this.props.history.push(\"/login\")\n   }\n\n   doTheThing = () => {\n     const finalArray = [];\n     let arr1 = this.state.allBeaches.map(beach => {\n       return beach\n     })\n     let arr2 = this.state.beachSaveData.map(fav => {\n       return fav\n     })\n\n     // debugger\n     if (this.state.currentUser){\n       let userID = this.state.currentUser.id\n       arr1.forEach((e1) => arr2.forEach((e2) =>\n         {if (e1.id === e2.beach_id && userID === e2.user_id ){\n           // debugger;\n           finalArray.push(e1)\n         }\n       }\n     ))\n     return finalArray\n     // console.log(\"final array\", finalArray)\n     console.log(\"ONLY FUCKING NOW MY DUDE?\")\n     this.setState({\n       theFavs: finalArray\n     }, () => {console.log(\"ONLY FUCKING NOW MY DUDE?\", this.state.theFavs)})\n     }\n\n   }\n\n\n     saveBeach = () => {\n       console.log(\"you got this!\", this.state.currentUser, this.state.currentBeach)\n\n       let thisOne = this.state.allBeaches.find(beach => {\n         return beach.name === this.state.currentBeach.name\n       })\n\n       let userID = this.state.currentUser.id\n       console.log(\"save beach\", thisOne)\n       let favCheck = this.doTheThing().find(beach => {return beach.id === thisOne.id})\n\n       // let favCheck = this.state.beachSaveData.find(beach => {\n       //   return beach.id === thisOne.id && beach.user_id === userID})\n\n       console.log(\"wut\", thisOne && !favCheck)\n       // debugger;\n       if (thisOne && !favCheck){\n         fetch('http://localhost:3000/favs', {\n           method: \"POST\",\n           headers: {\n             \"Content-Type\": \"application/json\",\n             \"Accept\": \"application/json\",\n           },\n           body: JSON.stringify({\n             user_id: this.state.currentUser.id,\n             beach_id: thisOne.id,\n           })\n         })\n           .then(r => r.json())\n           .then(data => {\n             this.fetchFavs()\n           })\n       }\n     }\n\n     removeBeach = () => {\n       console.log(\"remove\", this.state.beachSaveData )\n       let userID = this.state.currentUser.id\n       let thisOne = this.state.allBeaches.find(beach => {\n         return beach.name === this.state.currentBeach.name\n       })\n       let favID = this.state.beachSaveData.find(fav => {\n         return fav.user_id === userID && fav.beach_id === thisOne.id\n           // console.log(\"remove favID\", favID)\n         })\n\n         fetch(`http://localhost:3000/favs/${favID.id}`, {\n           method: \"DELETE\",\n           headers: {\n             \"Content-Type\": \"application/json\",\n             \"Access-Control-Allow-Methods\": \"DELETE\",\n             \"Access-Control-Allow-Origin\": \"http://localhost\"\n           //   \"Accept\": \"application/json\",\n           },\n         })\n           .then(r => r.json())\n           .then(data => {\n             this.fetchFavs()\n           })\n       }\n\n\n  render() {\n    console.log(\"app\", this.state)\n    // console.log(\"beach info\", this.state.beachData.results)\n    return (\n\n        <div className=\"App\">\n          <Nav logout={this.logout} currentUser={this.state.currentUser} />\n\n          <Switch>\n\n            <Route path='/signup' render={() => <SignUp setUser={this.setUser} signUpUser={this.signUpUser}/>} />\n            {\n              this.state.beachData\n              ?\n              <div className=\"Loader\" />\n              :\n              <Route path=\"/login\" render={(routerProps) => <Login {...routerProps} loginUser={this.loginUser} beachData={this.state.beachData}/>} />\n            }\n\n            <Route path='/map' component={Map} />\n            <Route path='/beach' render={(routerProps) => <Show {...routerProps} currentBeach={this.state.currentBeach} currentUser={this.state.currentUser} allBeaches={this.state.allBeaches} beachSaveData={this.state.beachSaveData} doTheThing={this.doTheThing} theFavs={this.doTheThing()} saveBeach={this.saveBeach} removeBeach={this.removeBeach}/>} />\n\n            <Route path=\"/notes\" render={(routerProps) => <AllNotes {...routerProps} fetchNotes={this.fetchNotes} currentUser={this.state.currentUser} allNotes={this.state.allNotes} />} />\n\n          </Switch>\n          <Route exact path='/home' render={(routerProps) => <MainContainer {...routerProps} selectBeach={this.selectBeach} beachData={this.state.beachData.results} allBeaches={this.state.allBeaches} beachSaveData={this.state.beachSaveData} currentUser={this.state.currentUser} doTheThing={this.doTheThing} theFavs={this.doTheThing()} />} />\n          <div className=\"Loader\">\n          </div>\n        </div>\n\n    );\n  }\n\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}