{"ast":null,"code":"var _jsxFileName = \"/Users/cbatsoula/_exp_/waveson/test-waveson-api/client/src/containers/NoteStuff.js\";\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport NoteCard from '../components/NoteCard';\nimport PhotoUpload from './PhotoUpload';\nimport { Image, Video, Transformation, CloudinaryContext } from 'cloudinary-react';\nimport cloudinary from 'cloudinary-react';\n\nclass NoteStuff extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      note: null,\n      allNotes: null,\n      oneNote: null,\n      select: false,\n      // tag: null,\n      // oneTag: null,\n      // allTags: null,\n      photoInfo: null,\n      loading: false,\n      idkmydude: null\n    };\n\n    this.fetchNotes = () => {\n      let thisOne = this.props.allBeaches.find(beach => {\n        return beach.name === this.props.currentBeach.name;\n      });\n      let userID = this.props.currentUser.id;\n      console.log(\"userID\", userID);\n      fetch('/api/notes').then(r => r.json()).then(stuff => {\n        let findFromNotes = stuff.filter(note => {\n          return note.beach_id === thisOne.id && note.user_id === userID;\n        });\n        console.log(\"pls\", findFromNotes); // debugger;\n\n        this.setState({\n          allNotes: findFromNotes\n        }, () => {\n          console.log(\"fetchNotes\", this.state.allNotes, userID);\n        });\n      });\n    };\n\n    this.fetchTags = () => {\n      let thisOne = this.props.allBeaches.find(beach => {\n        return beach.name === this.props.currentBeach.name;\n      });\n      let userID = this.props.currentUser.id;\n      fetch('/api/tags').then(r => r.json()).then(stuff => {\n        let findFromTags = stuff.filter(tag => {\n          return tag.beach_id === thisOne.id && tag.user_id === userID;\n        });\n        this.setState({\n          allTags: findFromTags\n        });\n      });\n    };\n\n    this.handleChange = event => {\n      this.setState({\n        oneNote: { ...this.state.oneNote,\n          [event.target.name]: event.target.value\n        },\n        [event.target.name]: event.target.value,\n        oneTag: { ...this.state.oneTag,\n          [event.target.name]: event.target.value\n        }\n      });\n    };\n\n    this.handleEdit = thing => {\n      // console.log(\"one note\", thing, thing.id)\n      this.setState({\n        oneNote: thing,\n        select: true\n      });\n    };\n\n    this.handleDelete = thing => {\n      // console.log(\"delete this review\", thing.id)\n      fetch(`/api/notes/${thing.id}`, {\n        method: \"DELETE\"\n      }).then(r => r.json()).then(data => {\n        console.log(\"removed\", data);\n        var newItems = this.state.allNotes.filter(note => {\n          return note.id !== thing.id;\n        });\n        this.setState({\n          allNotes: newItems\n        });\n      });\n    };\n\n    this.renderNoteCards = () => {\n      return this.state.allNotes.map(note => {\n        return /*#__PURE__*/React.createElement(NoteCard, {\n          note: note,\n          key: note.id,\n          handleEdit: this.props.handleEdit,\n          handleDelete: this.props.handleDelete,\n          handleChange: this.props.handleChange,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 223,\n            columnNumber: 14\n          }\n        });\n      });\n    };\n\n    this.setShit = result => {\n      this.setState({\n        photoInfo: result,\n        loading: null,\n        idkmydude: \"Photo selected and ready to upload!\"\n      });\n    };\n  }\n\n  //lifted to app\n  //   // handleSubmit = event => {\n  //   // event.preventDefault();\n  //   //\n  //   //\n  //   // let thisOne = this.props.allBeaches.find(beach => {\n  //   //   return beach.name === this.props.currentBeach.name\n  //   // })\n  //   //\n  //   // if (this.props.select){\n  //   //   fetch(`/api/notes/${this.props.oneNote.id}`, {\n  //   //     method: \"PATCH\",\n  //   //     headers: {\n  //   //       \"Content-Type\": \"application/json\",\n  //   //       \"Access-Control-Allow-Methods\": \"PATCH\",\n  //   //       \"Access-Control-Allow-Origin\": \"http://localhost\"\n  //   //     },\n  //   //     body: JSON.stringify({\n  //   //       note: this.props.note,\n  //   //       user_id: this.props.currentUser.id,\n  //   //       beach_id: thisOne.id,\n  //   //      })\n  //   //   })\n  //   //     .then(r => r.json())\n  //   //     .then(data => {\n  //   //       // console.log(\"data\", data)\n  //   //       //update one object in state array\n  //   //       let updatedNotes = this.state.allNotes.map(note => {\n  //   //         if (note.id === this.props.oneNote.id){\n  //   //           return this.props.oneNote\n  //   //         } else {\n  //   //           return note\n  //   //         }\n  //   //       })\n  //   //       this.setState({\n  //   //         note: \"\",\n  //   //         allNotes: updatedNotes,\n  //   //         select: false,\n  //   //       })\n  //   //     })\n  //   //\n  //   // } else {\n  //   //   this.postNotes()\n  //   //   // this.postTags()\n  //   //   }\n  //   // };\n  //\n  //\n  // //not inn use\n  //   // postTags = () => {\n  //   //   let thisOne = this.props.allBeaches.find(beach => {\n  //   //     return beach.name === this.props.currentBeach.name\n  //   //   })\n  //   //   fetch(`/api/tags`, {\n  //   //     method: \"POST\",\n  //   //     headers: {\n  //   //       \"Content-Type\": \"application/json\",\n  //   //       \"Accept\": \"application/json\"\n  //   //     },\n  //   //     body: JSON.stringify({\n  //   //       tag: this.state.tag,\n  //   //       user_id: this.props.currentUser.id,\n  //   //       beach_id: thisOne.id,\n  //   //     })\n  //   //   })\n  //   //     .then( res => res.json())\n  //   //     .then( data => {\n  //   //       console.log(\"back from post tag\", data)\n  //   //       this.setState({\n  //   //         tag: \"\",\n  //   //         allTags: [...this.state.allTags, data]\n  //   //       }, () => {console.log(\"POSTED TAG\", this.state.allTags)})\n  //   //     })\n  //   // }\n  //\n  //   ifPhoto = () => {\n  //     if (this.state.photoInfo){\n  //       return this.state.photoInfo[0].secure_url\n  //     } else {\n  //       return null\n  //     }\n  //   }\n  //\n  //   // postNotes = () => {\n  //   //   let thisOne = this.props.allBeaches.find(beach => {\n  //   //     return beach.name === this.props.currentBeach.name\n  //   //   })\n  //   //   // this.setState({\n  //   //   //\n  //   //   // })\n  //   //   // perhaps make another function, add Note, that looks through\n  //   //   // allNotes and places this newly made note to the tip top\n  //   //   // would need at least one arg, the id, to find from the time of\n  //   //   // submit to push it up\n  //   //   // let thisPhoto = this.state.photoInfo[0].secure_url\n  //   //   fetch(\"/api/notes\", {\n  //   //     method: \"POST\",\n  //   //     headers: {\n  //   //       \"Content-Type\": \"application/json\",\n  //   //       \"Accept\": \"application/json\"\n  //   //     },\n  //   //     body: JSON.stringify({\n  //   //       note: this.state.note,\n  //   //       user_id: this.props.currentUser.id,\n  //   //       beach_id: thisOne.id,\n  //   //       photo: this.ifPhoto(),\n  //   //     })\n  //   //   })\n  //   //     .then(res => res.json())\n  //   //     .then(data => {\n  //   //       // console.log(\"back from post\", data)\n  //   //       this.setState({\n  //   //         note: \" \",\n  //   //         select: false,\n  //   //         allNotes: [data, ...this.state.allNotes]\n  //   //       }\n  //   //       , () => {console.log(\"POSTED NOTE immed\", this.state.allNotes)}\n  //   //      )\n  //   //       console.log(\"POSTED NOTE\", this.state.allNotes)\n  //   //     });\n  //   // }\n  componentDidMount() {\n    this.fetchNotes(); // this.fetchTags()\n  }\n\n  uploadWidget() {\n    this.setState({\n      loading: true\n    });\n    window.cloudinary.openUploadWidget({\n      cloud_name: 'dlybpe5za',\n      upload_preset: 'waveson'\n    }, (error, result) => {\n      // console.log(result);\n      if (result) {\n        this.setShit(result);\n      }\n    });\n  } // <input\n  // onChange={this.handleChange}\n  // name=\"tag\"\n  // type=\"text\"\n  // value={this.state.oneTag ? this.state.oneTag.tag : this.state.tag}\n  // placeholder=\"tags\"/>\n  // <Image cloudName=\"dlybpe5za\" publicId=\"sample\" width=\"300\" crop=\"scale\" />\n\n\n  render() {\n    // console.log(\"note\", this.state)\n    // console.log(\"note props\", this.props)\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"Note-Container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"upload\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.uploadWidget.bind(this),\n      className: \"upload-button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 17\n      }\n    }, \"\\uD83D\\uDCF7 ADD IMAGE \\uD83D\\uDCF8\"), this.state.idkmydude ? this.state.idkmydude : null), /*#__PURE__*/React.createElement(\"form\", {\n      className: \"Note-Form\",\n      onSubmit: this.state.handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"textarea\", {\n      id: \"styled\",\n      onChange: this.state.handleChange,\n      name: \"note\",\n      value: this.state.oneNote ? this.state.oneNote.note : this.state.note,\n      rows: \"4\",\n      cols: \"50\",\n      type: \"text\",\n      placeholder: \"Start your entry here!\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      className: \"button\",\n      type: \"submit\",\n      value: \"Submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 11\n      }\n    })), this.state.allNotes ? this.renderNoteCards() : /*#__PURE__*/React.createElement(\"div\", {\n      className: \"Loader\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nexport default NoteStuff;","map":{"version":3,"sources":["/Users/cbatsoula/_exp_/waveson/test-waveson-api/client/src/containers/NoteStuff.js"],"names":["React","Link","NoteCard","PhotoUpload","Image","Video","Transformation","CloudinaryContext","cloudinary","NoteStuff","Component","state","note","allNotes","oneNote","select","photoInfo","loading","idkmydude","fetchNotes","thisOne","props","allBeaches","find","beach","name","currentBeach","userID","currentUser","id","console","log","fetch","then","r","json","stuff","findFromNotes","filter","beach_id","user_id","setState","fetchTags","findFromTags","tag","allTags","handleChange","event","target","value","oneTag","handleEdit","thing","handleDelete","method","data","newItems","renderNoteCards","map","setShit","result","componentDidMount","uploadWidget","window","openUploadWidget","cloud_name","upload_preset","error","render","bind","handleSubmit"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\nimport NoteCard from '../components/NoteCard';\nimport PhotoUpload from './PhotoUpload';\nimport {Image, Video, Transformation, CloudinaryContext} from 'cloudinary-react';\nimport cloudinary from 'cloudinary-react';\n\n\nclass NoteStuff extends React.Component {\n\n  state = {\n    note: null,\n    allNotes: null,\n    oneNote: null,\n    select: false,\n    // tag: null,\n    // oneTag: null,\n    // allTags: null,\n    photoInfo: null,\n    loading: false,\n    idkmydude: null,\n  }\n\n//lifted to app\n//   // handleSubmit = event => {\n//   // event.preventDefault();\n//   //\n//   //\n//   // let thisOne = this.props.allBeaches.find(beach => {\n//   //   return beach.name === this.props.currentBeach.name\n//   // })\n//   //\n//   // if (this.props.select){\n//   //   fetch(`/api/notes/${this.props.oneNote.id}`, {\n//   //     method: \"PATCH\",\n//   //     headers: {\n//   //       \"Content-Type\": \"application/json\",\n//   //       \"Access-Control-Allow-Methods\": \"PATCH\",\n//   //       \"Access-Control-Allow-Origin\": \"http://localhost\"\n//   //     },\n//   //     body: JSON.stringify({\n//   //       note: this.props.note,\n//   //       user_id: this.props.currentUser.id,\n//   //       beach_id: thisOne.id,\n//   //      })\n//   //   })\n//   //     .then(r => r.json())\n//   //     .then(data => {\n//   //       // console.log(\"data\", data)\n//   //       //update one object in state array\n//   //       let updatedNotes = this.state.allNotes.map(note => {\n//   //         if (note.id === this.props.oneNote.id){\n//   //           return this.props.oneNote\n//   //         } else {\n//   //           return note\n//   //         }\n//   //       })\n//   //       this.setState({\n//   //         note: \"\",\n//   //         allNotes: updatedNotes,\n//   //         select: false,\n//   //       })\n//   //     })\n//   //\n//   // } else {\n//   //   this.postNotes()\n//   //   // this.postTags()\n//   //   }\n//   // };\n//\n//\n// //not inn use\n//   // postTags = () => {\n//   //   let thisOne = this.props.allBeaches.find(beach => {\n//   //     return beach.name === this.props.currentBeach.name\n//   //   })\n//   //   fetch(`/api/tags`, {\n//   //     method: \"POST\",\n//   //     headers: {\n//   //       \"Content-Type\": \"application/json\",\n//   //       \"Accept\": \"application/json\"\n//   //     },\n//   //     body: JSON.stringify({\n//   //       tag: this.state.tag,\n//   //       user_id: this.props.currentUser.id,\n//   //       beach_id: thisOne.id,\n//   //     })\n//   //   })\n//   //     .then( res => res.json())\n//   //     .then( data => {\n//   //       console.log(\"back from post tag\", data)\n//   //       this.setState({\n//   //         tag: \"\",\n//   //         allTags: [...this.state.allTags, data]\n//   //       }, () => {console.log(\"POSTED TAG\", this.state.allTags)})\n//   //     })\n//   // }\n//\n//   ifPhoto = () => {\n//     if (this.state.photoInfo){\n//       return this.state.photoInfo[0].secure_url\n//     } else {\n//       return null\n//     }\n//   }\n//\n//   // postNotes = () => {\n//   //   let thisOne = this.props.allBeaches.find(beach => {\n//   //     return beach.name === this.props.currentBeach.name\n//   //   })\n//   //   // this.setState({\n//   //   //\n//   //   // })\n//   //   // perhaps make another function, add Note, that looks through\n//   //   // allNotes and places this newly made note to the tip top\n//   //   // would need at least one arg, the id, to find from the time of\n//   //   // submit to push it up\n//   //   // let thisPhoto = this.state.photoInfo[0].secure_url\n//   //   fetch(\"/api/notes\", {\n//   //     method: \"POST\",\n//   //     headers: {\n//   //       \"Content-Type\": \"application/json\",\n//   //       \"Accept\": \"application/json\"\n//   //     },\n//   //     body: JSON.stringify({\n//   //       note: this.state.note,\n//   //       user_id: this.props.currentUser.id,\n//   //       beach_id: thisOne.id,\n//   //       photo: this.ifPhoto(),\n//   //     })\n//   //   })\n//   //     .then(res => res.json())\n//   //     .then(data => {\n//   //       // console.log(\"back from post\", data)\n//   //       this.setState({\n//   //         note: \" \",\n//   //         select: false,\n//   //         allNotes: [data, ...this.state.allNotes]\n//   //       }\n//   //       , () => {console.log(\"POSTED NOTE immed\", this.state.allNotes)}\n//   //      )\n//   //       console.log(\"POSTED NOTE\", this.state.allNotes)\n//   //     });\n//   // }\n\n  componentDidMount() {\n    this.fetchNotes()\n    // this.fetchTags()\n  }\n\n  fetchNotes = () => {\n    let thisOne = this.props.allBeaches.find(beach => {\n      return beach.name === this.props.currentBeach.name\n    })\n    let userID = this.props.currentUser.id\n    console.log(\"userID\", userID)\n    fetch('/api/notes')\n      .then( r => r.json())\n      .then( stuff => {\n        let findFromNotes = stuff.filter( note => {\n          return note.beach_id === thisOne.id && note.user_id === userID})\n        console.log(\"pls\", findFromNotes)\n        // debugger;\n\n\n        this.setState({\n          allNotes: findFromNotes\n        }, () => {console.log(\"fetchNotes\", this.state.allNotes, userID)})\n\n      })\n  }\n  fetchTags = () => {\n    let thisOne = this.props.allBeaches.find(beach => {\n      return beach.name === this.props.currentBeach.name\n    })\n    let userID = this.props.currentUser.id\n    fetch('/api/tags')\n      .then( r => r.json())\n      .then( stuff => {\n        let findFromTags = stuff.filter( tag => {\n          return tag.beach_id === thisOne.id && tag.user_id === userID})\n\n        this.setState({\n          allTags: findFromTags\n        })\n\n      })\n  }\n\n  handleChange = (event) => {\n    this.setState({\n      oneNote: {...this.state.oneNote, [event.target.name]: event.target.value},\n      [event.target.name]: event.target.value,\n      oneTag: {...this.state.oneTag, [event.target.name]: event.target.value},\n    });\n  };\n\n  handleEdit = (thing) => {\n  // console.log(\"one note\", thing, thing.id)\n    this.setState({\n      oneNote: thing,\n      select: true\n    });\n\n  }\n\n  handleDelete = (thing) => {\n  // console.log(\"delete this review\", thing.id)\n   fetch(`/api/notes/${thing.id}`, {\n     method: \"DELETE\",\n   })\n     .then( r => r.json())\n     .then( data => {\n       console.log(\"removed\", data)\n       var newItems = this.state.allNotes.filter((note) => {\n         return note.id !== thing.id});\n     this.setState({ allNotes: newItems });\n     })\n  }\n\n  renderNoteCards = () => {\n    return this.state.allNotes.map( note => {\n      return <NoteCard note={note} key={note.id} handleEdit={this.props.handleEdit} handleDelete={this.props.handleDelete} handleChange={this.props.handleChange} />\n    })\n  }\n\n  setShit = (result) => {\n    this.setState({\n      photoInfo: result,\n      loading: null,\n      idkmydude: \"Photo selected and ready to upload!\"\n\n    })\n  }\n\n  uploadWidget() {\n    this.setState({\n      loading: true,\n    })\n    window.cloudinary.openUploadWidget({ cloud_name: 'dlybpe5za', upload_preset: 'waveson'},\n        (error, result) => {\n            // console.log(result);\n            if (result) {\n              this.setShit(result)\n            }\n\n        });\n      }\n\n      // <input\n      // onChange={this.handleChange}\n      // name=\"tag\"\n      // type=\"text\"\n      // value={this.state.oneTag ? this.state.oneTag.tag : this.state.tag}\n      // placeholder=\"tags\"/>\n      // <Image cloudName=\"dlybpe5za\" publicId=\"sample\" width=\"300\" crop=\"scale\" />\n  render () {\n    // console.log(\"note\", this.state)\n    // console.log(\"note props\", this.props)\n    return (\n      <div className=\"Note-Container\">\n            <div className=\"upload\">\n                <button onClick={this.uploadWidget.bind(this)} className=\"upload-button\">\n                    📷 ADD IMAGE 📸\n                </button>\n\n                {\n                  this.state.idkmydude\n                  ?\n                  this.state.idkmydude\n                  :\n                  null\n                }\n            </div>\n\n        <form className=\"Note-Form\" onSubmit={this.state.handleSubmit}>\n          <br />\n          <textarea\n          id=\"styled\"\n          onChange={this.state.handleChange}\n          name=\"note\"\n          value={this.state.oneNote ? this.state.oneNote.note : this.state.note}\n          rows=\"4\"\n          cols=\"50\"\n          type=\"text\"\n          placeholder=\"Start your entry here!\"/>\n          <input className=\"button\" type=\"submit\" value=\"Submit\" />\n        </form>\n      {\n        this.state.allNotes\n        ?\n        this.renderNoteCards()\n        :\n        <div className=\"Loader\"/>\n      }\n\n      </div>\n    )\n  }\n}\nexport default NoteStuff\n"]},"metadata":{},"sourceType":"module"}