{"ast":null,"code":"var _jsxFileName = \"/Users/cbatsoula/_exp_/waveson/test-waveson-api/client/src/containers/Notes.js\";\nimport React from 'react';\nimport NoteCard from '../components/NoteCard';\nimport Banner from '../components/Banner';\nimport AllNotesFilter from './AllNotesFilter';\nimport AllNotes from './AllNotes';\nimport DatePicker from \"react-datepicker\";\n\nclass Notes extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      allNotes: null,\n      sortedNotes: null,\n      //filter\n      selectBeach: null,\n      toggle: false,\n      startDate: new Date(),\n      selectTime: null\n    };\n\n    this.renderNoteCards = () => {\n      if (this.state.allNotes && this.state.selectBeach === \"all\") {\n        return this.state.allNotes.map(note => {\n          return /*#__PURE__*/React.createElement(NoteCard, {\n            allBeaches: this.props.allBeaches,\n            note: note,\n            key: note.id,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 24,\n              columnNumber: 16\n            }\n          });\n        });\n      }\n    };\n\n    this.componentDidMount = () => {\n      console.log(\"allBeaches\", this.props); // let thisOne = this.props.allBeaches.find(beach => {\n      //   return beach.name === this.props.currentBeach.name\n      // })\n\n      let userID = this.props.currentUser.id;\n      console.log(\"userID\", userID);\n      fetch('/api/notes').then(r => r.json()).then(stuff => {\n        // let findFromNotes = stuff.filter( note => {\n        //   return note.beach_id === thisOne.id && note.user_id === userID})\n        let findFromNotes = stuff.filter(note => {\n          return note.user_id === userID;\n        });\n        console.log(\"pls\", findFromNotes); // debugger;\n\n        this.setState({\n          allNotes: findFromNotes\n        }, () => {\n          console.log(\"fetchNotes\", this.state.allNotes, userID);\n        });\n      });\n    };\n\n    this.handleBeachChange = event => {\n      console.log(\"event\", event.target);\n      this.setState({\n        selectBeach: event.target.value,\n        sortedNotes: null,\n        toggle: false\n      }, () => {\n        console.log(\"handleChange\", this.state);\n      });\n    };\n\n    this.handleDateChange = date => {\n      this.setState({\n        startDate: date\n      });\n    };\n\n    this.handleSubmit = event => {\n      event.preventDefault();\n      console.log(\"submit!!\", this.state, this.props);\n\n      if (this.state.selectBeach === \"all\") {\n        let allNotes = this.state.allNotes;\n        this.setState({\n          sortedNotes: allNotes\n        }, () => {\n          console.log(\"all!!\", this.state);\n        });\n      }\n\n      let holdMe = [];\n      let theseNotes = this.state.allNotes.map(note => {\n        if (note.beach_name === this.state.selectBeach) {\n          console.log(\"yah\", note);\n          holdMe.push(note);\n          console.log(\"holdMe\", holdMe);\n          return note;\n        } else {\n          console.log(\"nah\", note);\n        }\n      });\n      console.log(\"theseNotes\", theseNotes, this.state, holdMe);\n      this.setState({\n        sortedNotes: holdMe,\n        toggle: true\n      });\n    };\n\n    this.renderSortedNoteCards = () => {\n      if (this.state.sortedNotes.length > 0) {\n        return this.state.sortedNotes.map(note => {\n          return /*#__PURE__*/React.createElement(NoteCard, {\n            allBeaches: this.props.allBeaches,\n            note: note,\n            key: note.id,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 113,\n              columnNumber: 16\n            }\n          });\n        });\n      } else if (this.state.allNotes && this.state.selectBeach === \"all\") {\n        return this.state.allNotes.map(note => {\n          return /*#__PURE__*/React.createElement(NoteCard, {\n            allBeaches: this.props.allBeaches,\n            note: note,\n            key: note.id,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 117,\n              columnNumber: 18\n            }\n          });\n        });\n      } else {\n        return /*#__PURE__*/React.createElement(\"h3\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 14\n          }\n        }, \" No notes for the selected parameters \");\n      }\n    };\n  }\n\n  render() {\n    console.log(\"Notes\", this.state);\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"Banner\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Banner, {\n      title: \"All Notes\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 7\n      }\n    })), /*#__PURE__*/React.createElement(AllNotesFilter, {\n      selectBeach: this.state.selectBeach,\n      allBeaches: this.props.allBeaches,\n      allNotes: this.state.allNotes,\n      handleBeachChange: this.handleBeachChange,\n      handleSubmit: this.handleSubmit,\n      handleDateChange: this.handleDateChange,\n      selectTime: this.state.selectTime,\n      selected: this.state.startDate,\n      onChange: this.handleDateChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"Note-Container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 7\n      }\n    }, this.state.toggle ? /*#__PURE__*/React.createElement(AllNotes, {\n      selectBeach: this.state.selectBeach,\n      allNotes: this.state.allNotes,\n      sortedNotes: this.state.sortedNotes,\n      renderNoteCards: this.renderNoteCards,\n      renderSortedNoteCards: this.renderSortedNoteCards,\n      toggle: this.state.toggle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 11\n      }\n    }) : /*#__PURE__*/React.createElement(AllNotes, {\n      selectBeach: this.state.selectBeach,\n      allNotes: this.state.allNotes,\n      sortedNotes: this.state.sortedNotes,\n      renderNoteCards: this.renderNoteCards,\n      renderSortedNoteCards: this.renderSortedNoteCards,\n      toggle: this.state.toggle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\n\nexport default Notes;","map":{"version":3,"sources":["/Users/cbatsoula/_exp_/waveson/test-waveson-api/client/src/containers/Notes.js"],"names":["React","NoteCard","Banner","AllNotesFilter","AllNotes","DatePicker","Notes","Component","state","allNotes","sortedNotes","selectBeach","toggle","startDate","Date","selectTime","renderNoteCards","map","note","props","allBeaches","id","componentDidMount","console","log","userID","currentUser","fetch","then","r","json","stuff","findFromNotes","filter","user_id","setState","handleBeachChange","event","target","value","handleDateChange","date","handleSubmit","preventDefault","holdMe","theseNotes","beach_name","push","renderSortedNoteCards","length","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport NoteCard from '../components/NoteCard';\nimport Banner from '../components/Banner';\nimport AllNotesFilter from './AllNotesFilter';\nimport AllNotes from './AllNotes';\nimport DatePicker from \"react-datepicker\";\n\nclass Notes extends React.Component {\n\n  state = {\n    allNotes: null,\n    sortedNotes: null,\n    //filter\n    selectBeach: null,\n    toggle: false,\n    startDate: new Date(),\n    selectTime: null,\n\n  }\n\n  renderNoteCards = () => {\n    if (this.state.allNotes && this.state.selectBeach === \"all\") {\n      return this.state.allNotes.map( note => {\n        return <NoteCard allBeaches={this.props.allBeaches} note={note} key={note.id} />\n      })\n\n    }\n  }\n\n  componentDidMount = () => {\n\n    console.log(\"allBeaches\", this.props)\n\n      // let thisOne = this.props.allBeaches.find(beach => {\n      //   return beach.name === this.props.currentBeach.name\n      // })\n      let userID = this.props.currentUser.id\n      console.log(\"userID\", userID)\n      fetch('/api/notes')\n        .then( r => r.json())\n        .then( stuff => {\n          // let findFromNotes = stuff.filter( note => {\n          //   return note.beach_id === thisOne.id && note.user_id === userID})\n          let findFromNotes = stuff.filter( note => {\n            return note.user_id === userID\n          })\n          console.log(\"pls\", findFromNotes)\n          // debugger;\n\n\n          this.setState({\n            allNotes: findFromNotes\n          }, () => {console.log(\"fetchNotes\", this.state.allNotes, userID)})\n\n        })\n\n  }\n\n  handleBeachChange = (event) => {\n    console.log(\"event\", event.target)\n    this.setState({\n      selectBeach: event.target.value,\n      sortedNotes: null,\n      toggle: false,\n    }, () => {console.log(\"handleChange\", this.state)});\n\n  }\n\n  handleDateChange = date => {\n    this.setState({\n      startDate: date\n    });\n  };\n\n  //upon submit, i want to setState for the array of notes to pass down as props to AllNotes\n  //within AllNotes I want to map over each note and spit out a NoteCard comp. for each one. within this I should make an, if the case is \"All\" to map and return NoteCards, else, map and render sortedNotes as NoteCards\n\n\n  handleSubmit = (event) => {\n\n    event.preventDefault();\n    console.log(\"submit!!\", this.state, this.props);\n\n    if (this.state.selectBeach === \"all\"){\n      let allNotes = this.state.allNotes\n      this.setState({\n        sortedNotes: allNotes,\n      }, () => {console.log(\"all!!\", this.state)})\n    }\n\n    let holdMe = []\n    let theseNotes = this.state.allNotes.map(note => {\n      if (note.beach_name === this.state.selectBeach){\n        console.log(\"yah\", note)\n        holdMe.push(note)\n        console.log(\"holdMe\", holdMe)\n        return note\n      } else {\n        console.log(\"nah\", note)\n      }\n    })\n    console.log(\"theseNotes\", theseNotes, this.state, holdMe)\n\n    this.setState({\n      sortedNotes: holdMe,\n      toggle: true,\n    })\n  }\n\n  renderSortedNoteCards = () => {\n    if (this.state.sortedNotes.length > 0) {\n      return this.state.sortedNotes.map( note => {\n        return <NoteCard allBeaches={this.props.allBeaches} note={note} key={note.id} />\n      })\n    } else if (this.state.allNotes && this.state.selectBeach === \"all\") {\n        return this.state.allNotes.map( note => {\n          return <NoteCard allBeaches={this.props.allBeaches} note={note} key={note.id} />\n        })\n\n      } else {\n      return <h3> No notes for the selected parameters </h3>\n    }\n  }\n\n  render () {\n    console.log(\"Notes\", this.state)\n    return (\n      <>\n      <div className=\"Banner\">\n      <Banner title={\"All Notes\"} />\n      </div>\n\n      <AllNotesFilter\n      selectBeach={this.state.selectBeach}\n      allBeaches={this.props.allBeaches}\n      allNotes={this.state.allNotes}\n      handleBeachChange={this.handleBeachChange}\n      handleSubmit={this.handleSubmit}\n      handleDateChange={this.handleDateChange}\n      selectTime={this.state.selectTime}\n      selected={this.state.startDate}\n      onChange={this.handleDateChange}/>\n\n\n      <div className=\"Note-Container\">\n\n        {\n          this.state.toggle\n          ?\n          <AllNotes\n          selectBeach={this.state.selectBeach}\n          allNotes={this.state.allNotes}\n          sortedNotes={this.state.sortedNotes}\n          renderNoteCards={this.renderNoteCards}\n          renderSortedNoteCards={this.renderSortedNoteCards}\n          toggle={this.state.toggle}  />\n          :\n          <AllNotes\n          selectBeach={this.state.selectBeach}\n          allNotes={this.state.allNotes}\n          sortedNotes={this.state.sortedNotes}\n          renderNoteCards={this.renderNoteCards}\n          renderSortedNoteCards={this.renderSortedNoteCards}\n          toggle={this.state.toggle} />\n\n        }\n      </div>\n      </>\n\n    )\n  }\n}\n\nexport default Notes;\n"]},"metadata":{},"sourceType":"module"}