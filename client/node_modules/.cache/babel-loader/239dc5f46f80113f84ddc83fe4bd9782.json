{"ast":null,"code":"var _jsxFileName = \"/Users/cbatsoula/_exp_/waveson/test-waveson-api/client/src/App.js\";\nimport React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport logo from \"./logo.svg\";\nimport Loader from './components/Loader';\nimport './App.css';\nimport Nav from './components/Nav';\nimport MainContainer from './containers/MainContainer';\nimport SignUp from './containers/SignUp';\nimport Login from './containers/Login';\nimport Show from './containers/Show';\nimport Map from './components/Map';\nimport AllNotes from './containers/AllNotes';\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      beachData: null,\n      userLoc: {},\n      currentUser: null,\n      currentBeach: null,\n      allBeaches: [],\n      allNotes: null,\n      beachSaveData: null,\n      theFavs: null\n    };\n\n    this.fetchNotes = () => {\n      // let thisOne = this.state.allBeaches.find(beach => {\n      //   return beach.name === this.state.currentBeach.name\n      // })\n      if (this.state.currentUser) {\n        fetch('/api/notes').then(r => r.json()).then(stuff => {\n          let findFromNotes = stuff.filter(note => {\n            return note.user_id === this.state.currentUser.id; //from this container of notes I want to only display the notes with the note.user_id to be equal === to whoever is currentUser.id\n          }); // console.log(\"pls\", findFromNotes)\n          // console.log(\"userID\", userID)\n\n          console.log(\"APP FETCH NOTES----------\", findFromNotes);\n          this.setState({\n            allNotes: findFromNotes\n          });\n        });\n      } else {\n        console.log(\"fetchNotes - app state\", this.state);\n      } // let userID = this.state.currentUser.id\n      // fetch('http://localhost:3000/notes')\n      //   .then( r => r.json())\n      //   .then( stuff => {\n      //     let findFromNotes = stuff.filter( note => {\n      //       return note.user_id === userID})\n      //     console.log(\"pls\", findFromNotes)\n      //\n      //\n      //     this.setState({\n      //       allNotes: findFromNotes\n      //     }, () => {console.log(\"fetchNotes\", findFromNotes)})\n      //\n      //   })\n\n    };\n\n    this.selectBeach = propsName => {\n      console.log(\"HELL YEAH\", propsName);\n      console.log(\"why\", this.state);\n      let selectedBeach = this.state.beachData.results.find(beach => {\n        return beach.name === propsName;\n      });\n      this.setState({\n        currentBeach: selectedBeach\n      }, () => {\n        this.props.history.push('/beach');\n      });\n    };\n\n    this.fetchFavs = () => {\n      fetch('/api/favs').then(r => r.json()).then(data => {\n        this.setState({\n          beachSaveData: data\n        }, () => this.doTheThing());\n      });\n    };\n\n    this.signUpUser = input => {\n      if (input.password === input.passwordConfirmation) {\n        fetch('/signup', {\n          method: \"POST\",\n          headers: {\n            'Content-Type': 'application/json',\n            'Accept': 'application/json'\n          },\n          body: JSON.stringify({\n            name: input.name,\n            username: input.username,\n            password: input.password\n          })\n        }).then(r => r.json()).then(response => {\n          if (response.errors) {\n            alert(response.errors);\n          } else {\n            // this.setState({\n            //   currentUser: {...response},\n            // })\n            this.setUser(response);\n          }\n        });\n      } else {\n        alert(\"Passwords don't match!\");\n      }\n    };\n\n    this.loginUser = input => {\n      fetch('/login', {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": 'application/json',\n          \"Accept\": 'application/json'\n        },\n        body: JSON.stringify({\n          username: input.username,\n          password: input.password\n        })\n      }).then(resp => resp.json()).then(response => {\n        if (response.errors) {\n          alert(response.errors);\n        } else {\n          this.setState({\n            currentUser: response // loading: false\n\n          }, () => {\n            this.fetchNotes();\n            this.props.history.push('/home');\n          });\n        }\n      });\n    };\n\n    this.setUser = response => {\n      this.setState({\n        currentUser: response\n      }, () => {\n        // console.log(\"THIS!!!!!\", this.props)\n        // localStorage.token = response.token\n        this.props.history.push(\"/home\");\n      });\n    };\n\n    this.logout = () => {\n      this.setState({\n        currentUser: null\n      });\n      this.props.history.push(\"/login\");\n    };\n\n    this.doTheThing = () => {\n      const finalArray = [];\n      let arr1 = this.state.allBeaches.map(beach => {\n        return beach;\n      });\n      let arr2 = this.state.beachSaveData.map(fav => {\n        return fav;\n      }); // debugger\n\n      if (this.state.currentUser) {\n        let userID = this.state.currentUser.id;\n        arr1.forEach(e1 => arr2.forEach(e2 => {\n          if (e1.id === e2.beach_id && userID === e2.user_id) {\n            // debugger;\n            finalArray.push(e1);\n          }\n        }));\n        return finalArray; // console.log(\"final array\", finalArray)\n\n        console.log(\"NOW\");\n        this.setState({\n          theFavs: finalArray\n        }, () => {\n          console.log(\"NOW\", this.state.theFavs);\n        });\n      }\n    };\n\n    this.saveBeach = () => {\n      console.log(\"you got this!\", this.state.currentUser, this.state.currentBeach);\n      let thisOne = this.state.allBeaches.find(beach => {\n        return beach.name === this.state.currentBeach.name;\n      });\n      let userID = this.state.currentUser.id;\n      console.log(\"save beach\", thisOne);\n      let favCheck = this.doTheThing().find(beach => {\n        return beach.id === thisOne.id;\n      }); // let favCheck = this.state.beachSaveData.find(beach => {\n      //   return beach.id === thisOne.id && beach.user_id === userID})\n\n      console.log(\"wut\", thisOne && !favCheck); // debugger;\n\n      if (thisOne && !favCheck) {\n        fetch('/api/favs', {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            \"Accept\": \"application/json\"\n          },\n          body: JSON.stringify({\n            user_id: this.state.currentUser.id,\n            beach_id: thisOne.id\n          })\n        }).then(r => r.json()).then(data => {\n          this.fetchFavs();\n        });\n      }\n    };\n\n    this.removeBeach = () => {\n      console.log(\"remove\", this.state.beachSaveData);\n      let userID = this.state.currentUser.id;\n      let thisOne = this.state.allBeaches.find(beach => {\n        return beach.name === this.state.currentBeach.name;\n      });\n      let favID = this.state.beachSaveData.find(fav => {\n        return fav.user_id === userID && fav.beach_id === thisOne.id; // console.log(\"remove favID\", favID)\n      });\n      fetch(`/api/favs/${favID.id}`, {\n        method: \"DELETE\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Access-Control-Allow-Methods\": \"DELETE\" // \"Access-Control-Allow-Origin\": \"http://localhost\"\n          //   \"Accept\": \"application/json\",\n\n        }\n      }).then(r => r.json()).then(data => {\n        this.fetchFavs();\n      });\n    };\n\n    this.handleEdit = thing => {\n      // console.log(\"one note\", thing, thing.id)\n      this.setState({\n        oneNote: thing,\n        select: true\n      });\n    };\n\n    this.handleDelete = thing => {\n      // console.log(\"delete this review\", thing.id)\n      fetch(`/api/notes/${thing.id}`, {\n        method: \"DELETE\"\n      }).then(r => r.json()).then(data => {\n        console.log(\"removed\", data);\n        var newItems = this.state.allNotes.filter(note => {\n          return note.id !== thing.id;\n        });\n        this.setState({\n          allNotes: newItems\n        });\n      });\n    };\n  }\n\n  componentDidMount() {\n    fetch(`https://www.googleapis.com/geolocation/v1/geolocate?key=${process.env.REACT_APP_GOOGLE_API_KEY}`, {\n      method: \"POST\"\n    }).then(r => r.json()).then(data => {\n      this.setState({\n        userLoc: data.location\n      }, () => {\n        this.beachesFromUserLoc();\n      });\n    });\n    fetch('/api/beaches').then(r => r.json()).then(allBeaches => {\n      this.setState({\n        allBeaches: allBeaches\n      });\n    });\n    this.fetchFavs();\n    this.fetchNotes();\n  }\n\n  beachesFromUserLoc() {\n    let userLat = this.state.userLoc.lat.toString();\n    let userLng = this.state.userLoc.lng.toString();\n    fetch(`https://cors-anywhere.herokuapp.com/https://maps.googleapis.com/maps/api/place/nearbysearch/json?location=${userLat},${userLng}&radius=21000&type=natural_feature&keyword=beach&key=${process.env.REACT_APP_GOOGLE_API_KEY}`, {\n      headers: {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*'\n      }\n    }).then(r => r.json()).then(data => {\n      this.setState({\n        beachData: data\n      }, () => {\n        this.postBeaches();\n      });\n    });\n  }\n\n  postBeaches() {\n    this.state.beachData.results.map(beach => {\n      return fetch('/api/beaches', {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Accept\": \"application/json\" // 'Access-Control-Allow-Origin': '*'\n\n        },\n        body: JSON.stringify({\n          name: beach.name,\n          lat: beach.geometry.location.lat,\n          vicinity: beach.vicinity,\n          lng: beach.geometry.location.lng\n        })\n      }).then(r => r.json()).then(console.log);\n    });\n  }\n\n  render() {\n    console.log(\"app\", this.state); // console.log(\"beach info\", this.state.beachData.results)\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 358,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Nav, {\n      logout: this.logout,\n      currentUser: this.state.currentUser,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 359,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Switch, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 361,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Route, {\n      path: \"/signup\",\n      render: () => /*#__PURE__*/React.createElement(SignUp, {\n        setUser: this.setUser,\n        signUpUser: this.signUpUser,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 363,\n          columnNumber: 49\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 363,\n        columnNumber: 13\n      }\n    }), this.state.beachData ? /*#__PURE__*/React.createElement(Route, {\n      path: \"/login\",\n      render: routerProps => /*#__PURE__*/React.createElement(Login, Object.assign({}, routerProps, {\n        loginUser: this.loginUser,\n        beachData: this.state.beachData,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 367,\n          columnNumber: 61\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 367,\n        columnNumber: 15\n      }\n    }) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"Space\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 370,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"Loader\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 371,\n        columnNumber: 15\n      }\n    })), /*#__PURE__*/React.createElement(Route, {\n      path: \"/map\",\n      component: Map,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 375,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      path: \"/beach\",\n      render: routerProps => /*#__PURE__*/React.createElement(Show, Object.assign({}, routerProps, {\n        currentBeach: this.state.currentBeach,\n        currentUser: this.state.currentUser,\n        allBeaches: this.state.allBeaches,\n        beachSaveData: this.state.beachSaveData,\n        doTheThing: this.doTheThing,\n        theFavs: this.doTheThing(),\n        saveBeach: this.saveBeach,\n        removeBeach: this.removeBeach,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 376,\n          columnNumber: 59\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 376,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      path: \"/loader\",\n      render: () => /*#__PURE__*/React.createElement(Loader, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 379,\n          columnNumber: 49\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 379,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      path: \"/notes\",\n      render: routerProps => /*#__PURE__*/React.createElement(AllNotes, Object.assign({}, routerProps, {\n        fetchNotes: this.fetchNotes,\n        currentUser: this.state.currentUser,\n        allNotes: this.state.allNotes,\n        allBeaches: this.state.allBeaches,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 381,\n          columnNumber: 59\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 381,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(Route, {\n      exact: true,\n      path: \"/home\",\n      render: routerProps => /*#__PURE__*/React.createElement(MainContainer, Object.assign({}, routerProps, {\n        selectBeach: this.selectBeach,\n        beachData: this.state.beachData.results,\n        allBeaches: this.state.allBeaches,\n        beachSaveData: this.state.beachSaveData,\n        currentUser: this.state.currentUser,\n        doTheThing: this.doTheThing,\n        theFavs: this.doTheThing(),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 384,\n          columnNumber: 62\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 384,\n        columnNumber: 11\n      }\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/cbatsoula/_exp_/waveson/test-waveson-api/client/src/App.js"],"names":["React","BrowserRouter","Router","Route","Switch","Loader","Nav","MainContainer","SignUp","Login","Show","Map","AllNotes","App","Component","state","beachData","userLoc","currentUser","currentBeach","allBeaches","allNotes","beachSaveData","theFavs","fetchNotes","fetch","then","r","json","stuff","findFromNotes","filter","note","user_id","id","console","log","setState","selectBeach","propsName","selectedBeach","results","find","beach","name","props","history","push","fetchFavs","data","doTheThing","signUpUser","input","password","passwordConfirmation","method","headers","body","JSON","stringify","username","response","errors","alert","setUser","loginUser","resp","logout","finalArray","arr1","map","arr2","fav","userID","forEach","e1","e2","beach_id","saveBeach","thisOne","favCheck","removeBeach","favID","handleEdit","thing","oneNote","select","handleDelete","newItems","componentDidMount","process","env","REACT_APP_GOOGLE_API_KEY","location","beachesFromUserLoc","userLat","lat","toString","userLng","lng","postBeaches","geometry","vicinity","render","routerProps"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport logo from './logo.svg';\nimport Loader from './components/Loader'\nimport './App.css';\nimport Nav from './components/Nav';\nimport MainContainer from './containers/MainContainer';\nimport SignUp from './containers/SignUp';\nimport Login from './containers/Login';\nimport Show from './containers/Show';\nimport Map from './components/Map';\nimport AllNotes from './containers/AllNotes';\n\n\n\n\nclass App extends React.Component {\n\n  state = {\n    beachData: null,\n    userLoc: {},\n    currentUser: null,\n    currentBeach: null,\n    allBeaches: [],\n    allNotes: null,\n    beachSaveData: null,\n    theFavs: null,\n  }\n\n\n  fetchNotes = () => {\n    // let thisOne = this.state.allBeaches.find(beach => {\n    //   return beach.name === this.state.currentBeach.name\n    // })\n    if (this.state.currentUser) {\n      fetch('/api/notes')\n      .then( r => r.json())\n      .then( stuff => {\n        let findFromNotes = stuff.filter( note => {\n          return note.user_id === this.state.currentUser.id\n\n          //from this container of notes I want to only display the notes with the note.user_id to be equal === to whoever is currentUser.id\n        })\n        // console.log(\"pls\", findFromNotes)\n        // console.log(\"userID\", userID)\n        console.log(\"APP FETCH NOTES----------\", findFromNotes)\n        this.setState({\n          allNotes: findFromNotes\n        })\n\n      })\n\n    } else {\n      console.log(\"fetchNotes - app state\", this.state)\n    }\n    // let userID = this.state.currentUser.id\n    // fetch('http://localhost:3000/notes')\n    //   .then( r => r.json())\n    //   .then( stuff => {\n    //     let findFromNotes = stuff.filter( note => {\n    //       return note.user_id === userID})\n    //     console.log(\"pls\", findFromNotes)\n    //\n    //\n    //     this.setState({\n    //       allNotes: findFromNotes\n    //     }, () => {console.log(\"fetchNotes\", findFromNotes)})\n    //\n    //   })\n  }\n\n  selectBeach = (propsName) => {\n    console.log(\"HELL YEAH\", propsName)\n    console.log(\"why\", this.state)\n    let selectedBeach = this.state.beachData.results.find(beach => {\n      return beach.name === propsName\n    })\n    this.setState({\n      currentBeach: selectedBeach\n    }, () => {this.props.history.push('/beach')})\n\n  }\n\n  fetchFavs = () => {\n    fetch('/api/favs')\n      .then( r => r.json())\n      .then( data => {\n        this.setState({\n          beachSaveData: data\n        }, () => this.doTheThing())\n      })\n  }\n\n  componentDidMount() {\n\n    fetch(`https://www.googleapis.com/geolocation/v1/geolocate?key=${process.env.REACT_APP_GOOGLE_API_KEY}`, {\n      method: \"POST\"\n    })\n      .then(r => r.json())\n      .then(data => {\n        this.setState({\n          userLoc: data.location\n        }, () => {\n          this.beachesFromUserLoc()\n        })\n      })\n    fetch('/api/beaches')\n      .then( r => r.json())\n      .then( allBeaches => {\n        this.setState({\n          allBeaches: allBeaches\n        })\n      })\n\n\n      this.fetchFavs()\n      this.fetchNotes()\n  }\n\n  beachesFromUserLoc() {\n    let userLat = this.state.userLoc.lat.toString()\n    let userLng = this.state.userLoc.lng.toString()\n\n    fetch(`https://cors-anywhere.herokuapp.com/https://maps.googleapis.com/maps/api/place/nearbysearch/json?location=${userLat},${userLng}&radius=21000&type=natural_feature&keyword=beach&key=${process.env.REACT_APP_GOOGLE_API_KEY}`, {\n      headers: {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*'\n      },\n    })\n      .then(r => r.json())\n      .then(data => {\n        this.setState({\n          beachData: data\n        }, () => {this.postBeaches()})\n      })\n  }\n\n  postBeaches() {\n    this.state.beachData.results.map(beach => {\n      return fetch('/api/beaches', {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Accept\": \"application/json\",\n        // 'Access-Control-Allow-Origin': '*'\n      },\n      body: JSON.stringify({\n        name: beach.name,\n        lat: beach.geometry.location.lat,\n        vicinity: beach.vicinity,\n        lng: beach.geometry.location.lng\n      })\n    })\n      .then(r => r.json())\n      .then(console.log)\n    })\n  }\n\n  signUpUser = (input) => {\n    if (input.password === input.passwordConfirmation) {\n      fetch('/signup', {\n        method: \"POST\",\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json'\n        },\n        body: JSON.stringify({\n          name: input.name,\n          username: input.username,\n          password: input.password\n        })\n      })\n      .then(r => r.json())\n      .then(response => {\n        if (response.errors){\n          alert(response.errors)\n        } else {\n          // this.setState({\n          //   currentUser: {...response},\n          // })\n          this.setUser(response)\n        }\n      })\n    } else {\n      alert(\"Passwords don't match!\")\n    }\n\n  }\n\n\n  loginUser = (input) => {\n    fetch('/login', {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": 'application/json',\n        \"Accept\": 'application/json'\n      },\n      body: JSON.stringify({\n        username: input.username,\n        password: input.password\n      })\n    })\n    .then(resp => resp.json())\n    .then(response => {\n      if (response.errors) {\n        alert(response.errors)\n      } else {\n        this.setState({\n          currentUser: response,\n          // loading: false\n        }, () => {\n          this.fetchNotes()\n\n          this.props.history.push('/home')})\n      }\n    })\n  }\n\n\n\n  setUser = (response) => {\n    this.setState({\n      currentUser: response\n    }, () => {\n      // console.log(\"THIS!!!!!\", this.props)\n      // localStorage.token = response.token\n      this.props.history.push(\"/home\")\n    })\n  }\n\n\n  logout = () => {\n    this.setState({\n      currentUser: null\n    })\n    this.props.history.push(\"/login\")\n   }\n\n   doTheThing = () => {\n     const finalArray = [];\n     let arr1 = this.state.allBeaches.map(beach => {\n       return beach\n     })\n     let arr2 = this.state.beachSaveData.map(fav => {\n       return fav\n     })\n\n     // debugger\n     if (this.state.currentUser){\n       let userID = this.state.currentUser.id\n       arr1.forEach((e1) => arr2.forEach((e2) =>\n         {if (e1.id === e2.beach_id && userID === e2.user_id ){\n           // debugger;\n           finalArray.push(e1)\n         }\n       }\n     ))\n     return finalArray\n     // console.log(\"final array\", finalArray)\n     console.log(\"NOW\")\n     this.setState({\n       theFavs: finalArray\n     }, () => {console.log(\"NOW\", this.state.theFavs)})\n     }\n\n   }\n\n\n     saveBeach = () => {\n       console.log(\"you got this!\", this.state.currentUser, this.state.currentBeach)\n\n       let thisOne = this.state.allBeaches.find(beach => {\n         return beach.name === this.state.currentBeach.name\n       })\n\n       let userID = this.state.currentUser.id\n       console.log(\"save beach\", thisOne)\n       let favCheck = this.doTheThing().find(beach => {return beach.id === thisOne.id})\n\n       // let favCheck = this.state.beachSaveData.find(beach => {\n       //   return beach.id === thisOne.id && beach.user_id === userID})\n\n       console.log(\"wut\", thisOne && !favCheck)\n       // debugger;\n       if (thisOne && !favCheck){\n         fetch('/api/favs', {\n           method: \"POST\",\n           headers: {\n             \"Content-Type\": \"application/json\",\n             \"Accept\": \"application/json\",\n           },\n           body: JSON.stringify({\n             user_id: this.state.currentUser.id,\n             beach_id: thisOne.id,\n           })\n         })\n           .then(r => r.json())\n           .then(data => {\n             this.fetchFavs()\n           })\n       }\n     }\n\n     removeBeach = () => {\n       console.log(\"remove\", this.state.beachSaveData )\n       let userID = this.state.currentUser.id\n       let thisOne = this.state.allBeaches.find(beach => {\n         return beach.name === this.state.currentBeach.name\n       })\n       let favID = this.state.beachSaveData.find(fav => {\n         return fav.user_id === userID && fav.beach_id === thisOne.id\n           // console.log(\"remove favID\", favID)\n         })\n\n         fetch(`/api/favs/${favID.id}`, {\n           method: \"DELETE\",\n           headers: {\n             \"Content-Type\": \"application/json\",\n             \"Access-Control-Allow-Methods\": \"DELETE\",\n             // \"Access-Control-Allow-Origin\": \"http://localhost\"\n           //   \"Accept\": \"application/json\",\n           },\n         })\n           .then(r => r.json())\n           .then(data => {\n             this.fetchFavs()\n           })\n       }\n       handleEdit = (thing) => {\n       // console.log(\"one note\", thing, thing.id)\n         this.setState({\n           oneNote: thing,\n           select: true\n         });\n\n       }\n\n       handleDelete = (thing) => {\n       // console.log(\"delete this review\", thing.id)\n        fetch(`/api/notes/${thing.id}`, {\n          method: \"DELETE\",\n        })\n          .then( r => r.json())\n          .then( data => {\n            console.log(\"removed\", data)\n            var newItems = this.state.allNotes.filter((note) => {\n              return note.id !== thing.id});\n          this.setState({ allNotes: newItems });\n          })\n       }\n\n\n  render() {\n    console.log(\"app\", this.state)\n    // console.log(\"beach info\", this.state.beachData.results)\n    return (\n\n        <div className=\"App\">\n          <Nav logout={this.logout} currentUser={this.state.currentUser} />\n\n          <Switch>\n\n            <Route path='/signup' render={() => <SignUp setUser={this.setUser} signUpUser={this.signUpUser}/>} />\n            {\n              this.state.beachData\n              ?\n              <Route path=\"/login\" render={(routerProps) => <Login {...routerProps} loginUser={this.loginUser} beachData={this.state.beachData}/>} />\n              :\n              <>\n              <div className=\"Space\" />\n              <div className=\"Loader\"/>\n              </>\n            }\n\n            <Route path='/map' component={Map} />\n            <Route path='/beach' render={(routerProps) => <Show {...routerProps} currentBeach={this.state.currentBeach} currentUser={this.state.currentUser} allBeaches={this.state.allBeaches} beachSaveData={this.state.beachSaveData} doTheThing={this.doTheThing} theFavs={this.doTheThing()} saveBeach={this.saveBeach} removeBeach={this.removeBeach}/>}\n             />\n\n            <Route path='/loader' render={() => <Loader />} />\n\n            <Route path=\"/notes\" render={(routerProps) => <AllNotes {...routerProps} fetchNotes={this.fetchNotes} currentUser={this.state.currentUser} allNotes={this.state.allNotes} allBeaches={this.state.allBeaches} />} />\n\n          </Switch>\n          <Route exact path='/home' render={(routerProps) => <MainContainer {...routerProps} selectBeach={this.selectBeach} beachData={this.state.beachData.results} allBeaches={this.state.allBeaches} beachSaveData={this.state.beachSaveData} currentUser={this.state.currentUser} doTheThing={this.doTheThing} theFavs={this.doTheThing()} />} />\n\n        </div>\n\n    );\n  }\n\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}