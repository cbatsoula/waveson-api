{"ast":null,"code":"var _jsxFileName = \"/Users/cbatsoula/_exp_/waveson/test-waveson-api/client/src/containers/NoteStuff.js\";\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport NoteCard from '../components/NoteCard';\nimport PhotoUpload from './PhotoUpload';\nimport { Image, Video, Transformation, CloudinaryContext } from 'cloudinary-react';\nimport cloudinary from 'cloudinary-react';\n\nclass NoteStuff extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      note: null,\n      allNotes: null,\n      oneNote: null,\n      select: false,\n      // tag: null,\n      // oneTag: null,\n      // allTags: null,\n      photoInfo: null,\n      loading: false,\n      idkmydude: null\n    };\n\n    this.ifPhoto = () => {\n      if (this.state.photoInfo) {\n        return this.state.photoInfo[0].secure_url;\n      } else {\n        return null;\n      }\n    };\n\n    this.postNotes = () => {\n      let thisOne = this.props.allBeaches.find(beach => {\n        return beach.name === this.props.currentBeach.name;\n      });\n      this.setState({}); // perhaps make another function, add Note, that looks through\n      // allNotes and places this newly made note to the tip top\n      // would need at least one arg, the id, to find from the time of\n      // submit to push it up\n\n      let thisPhoto = this.state.photoInfo[0].secure_url;\n      fetch(\"/api/notes\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Accept\": \"application/json\"\n        },\n        body: JSON.stringify({\n          note: this.state.note,\n          user_id: this.props.currentUser.id,\n          beach_id: thisOne.id,\n          photo: this.ifPhoto()\n        })\n      }).then(res => res.json()).then(data => {\n        // console.log(\"back from post\", data)\n        this.setState({\n          note: \" \",\n          select: false,\n          allNotes: [data, ...this.state.allNotes]\n        }, () => {\n          console.log(\"POSTED NOTE immed\", this.state.allNotes);\n        });\n        console.log(\"POSTED NOTE\", this.state.allNotes);\n      });\n    };\n\n    this.fetchNotes = () => {\n      let thisOne = this.props.allBeaches.find(beach => {\n        return beach.name === this.props.currentBeach.name;\n      });\n      let userID = this.props.currentUser.id;\n      console.log(\"userID\", userID);\n      fetch('/api/notes').then(r => r.json()).then(stuff => {\n        let findFromNotes = stuff.filter(note => {\n          return note.beach_id === thisOne.id && note.user_id === userID;\n        });\n        console.log(\"pls\", findFromNotes); // debugger;\n\n        this.setState({\n          allNotes: findFromNotes\n        }, () => {\n          console.log(\"fetchNotes\", this.state.allNotes, userID);\n        });\n      });\n    };\n\n    this.fetchTags = () => {\n      let thisOne = this.props.allBeaches.find(beach => {\n        return beach.name === this.props.currentBeach.name;\n      });\n      let userID = this.props.currentUser.id;\n      fetch('/api/tags').then(r => r.json()).then(stuff => {\n        let findFromTags = stuff.filter(tag => {\n          return tag.beach_id === thisOne.id && tag.user_id === userID;\n        });\n        this.setState({\n          allTags: findFromTags\n        });\n      });\n    };\n\n    this.handleChange = event => {\n      this.setState({\n        oneNote: { ...this.state.oneNote,\n          [event.target.name]: event.target.value\n        },\n        [event.target.name]: event.target.value,\n        oneTag: { ...this.state.oneTag,\n          [event.target.name]: event.target.value\n        }\n      });\n    };\n\n    this.handleEdit = thing => {\n      // console.log(\"one note\", thing, thing.id)\n      this.setState({\n        oneNote: thing,\n        select: true\n      });\n    };\n\n    this.handleDelete = thing => {\n      // console.log(\"delete this review\", thing.id)\n      fetch(`/api/notes/${thing.id}`, {\n        method: \"DELETE\"\n      }).then(r => r.json()).then(data => {\n        console.log(\"removed\", data);\n        var newItems = this.state.allNotes.filter(note => {\n          return note.id !== thing.id;\n        });\n        this.setState({\n          allNotes: newItems\n        });\n      });\n    };\n\n    this.renderNoteCards = () => {\n      return this.state.allNotes.map(note => {\n        return /*#__PURE__*/React.createElement(NoteCard, {\n          note: note,\n          key: note.id,\n          handleEdit: this.props.handleEdit,\n          handleDelete: this.props.handleDelete,\n          handleChange: this.props.handleChange,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 223,\n            columnNumber: 14\n          }\n        });\n      });\n    };\n\n    this.setShit = result => {\n      this.setState({\n        photoInfo: result,\n        loading: null,\n        idkmydude: \"Photo selected and ready to upload!\"\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.fetchNotes(); // this.fetchTags()\n  }\n\n  uploadWidget() {\n    this.setState({\n      loading: true\n    });\n    window.cloudinary.openUploadWidget({\n      cloud_name: 'dlybpe5za',\n      upload_preset: 'waveson'\n    }, (error, result) => {\n      // console.log(result);\n      if (result) {\n        this.setShit(result);\n      }\n    });\n  } // <input\n  // onChange={this.handleChange}\n  // name=\"tag\"\n  // type=\"text\"\n  // value={this.state.oneTag ? this.state.oneTag.tag : this.state.tag}\n  // placeholder=\"tags\"/>\n  // <Image cloudName=\"dlybpe5za\" publicId=\"sample\" width=\"300\" crop=\"scale\" />\n\n\n  render() {\n    // console.log(\"note\", this.state)\n    // console.log(\"note props\", this.props)\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"Note-Container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"upload\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.uploadWidget.bind(this),\n      className: \"upload-button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 17\n      }\n    }, \"\\uD83D\\uDCF7 ADD IMAGE \\uD83D\\uDCF8\"), this.state.idkmydude ? this.state.idkmydude : null), /*#__PURE__*/React.createElement(\"form\", {\n      className: \"Note-Form\",\n      onSubmit: this.state.handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"textarea\", {\n      id: \"styled\",\n      onChange: this.state.handleChange,\n      name: \"note\",\n      value: this.state.oneNote ? this.state.oneNote.note : this.state.note,\n      rows: \"4\",\n      cols: \"50\",\n      type: \"text\",\n      placeholder: \"Start your entry here!\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      className: \"button\",\n      type: \"submit\",\n      value: \"Submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 11\n      }\n    })), this.state.allNotes ? this.renderNoteCards() : /*#__PURE__*/React.createElement(\"div\", {\n      className: \"Loader\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nexport default NoteStuff;","map":{"version":3,"sources":["/Users/cbatsoula/_exp_/waveson/test-waveson-api/client/src/containers/NoteStuff.js"],"names":["React","Link","NoteCard","PhotoUpload","Image","Video","Transformation","CloudinaryContext","cloudinary","NoteStuff","Component","state","note","allNotes","oneNote","select","photoInfo","loading","idkmydude","ifPhoto","secure_url","postNotes","thisOne","props","allBeaches","find","beach","name","currentBeach","setState","thisPhoto","fetch","method","headers","body","JSON","stringify","user_id","currentUser","id","beach_id","photo","then","res","json","data","console","log","fetchNotes","userID","r","stuff","findFromNotes","filter","fetchTags","findFromTags","tag","allTags","handleChange","event","target","value","oneTag","handleEdit","thing","handleDelete","newItems","renderNoteCards","map","setShit","result","componentDidMount","uploadWidget","window","openUploadWidget","cloud_name","upload_preset","error","render","bind","handleSubmit"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\nimport NoteCard from '../components/NoteCard';\nimport PhotoUpload from './PhotoUpload';\nimport {Image, Video, Transformation, CloudinaryContext} from 'cloudinary-react';\nimport cloudinary from 'cloudinary-react';\n\n\nclass NoteStuff extends React.Component {\n\n  state = {\n    note: null,\n    allNotes: null,\n    oneNote: null,\n    select: false,\n    // tag: null,\n    // oneTag: null,\n    // allTags: null,\n    photoInfo: null,\n    loading: false,\n    idkmydude: null,\n  }\n\n//lifted to app\n  // handleSubmit = event => {\n  // event.preventDefault();\n  //\n  //\n  // let thisOne = this.props.allBeaches.find(beach => {\n  //   return beach.name === this.props.currentBeach.name\n  // })\n  //\n  // if (this.props.select){\n  //   fetch(`/api/notes/${this.props.oneNote.id}`, {\n  //     method: \"PATCH\",\n  //     headers: {\n  //       \"Content-Type\": \"application/json\",\n  //       \"Access-Control-Allow-Methods\": \"PATCH\",\n  //       \"Access-Control-Allow-Origin\": \"http://localhost\"\n  //     },\n  //     body: JSON.stringify({\n  //       note: this.props.note,\n  //       user_id: this.props.currentUser.id,\n  //       beach_id: thisOne.id,\n  //      })\n  //   })\n  //     .then(r => r.json())\n  //     .then(data => {\n  //       // console.log(\"data\", data)\n  //       //update one object in state array\n  //       let updatedNotes = this.state.allNotes.map(note => {\n  //         if (note.id === this.props.oneNote.id){\n  //           return this.props.oneNote\n  //         } else {\n  //           return note\n  //         }\n  //       })\n  //       this.setState({\n  //         note: \"\",\n  //         allNotes: updatedNotes,\n  //         select: false,\n  //       })\n  //     })\n  //\n  // } else {\n  //   this.postNotes()\n  //   // this.postTags()\n  //   }\n  // };\n\n\n//not inn use\n  // postTags = () => {\n  //   let thisOne = this.props.allBeaches.find(beach => {\n  //     return beach.name === this.props.currentBeach.name\n  //   })\n  //   fetch(`/api/tags`, {\n  //     method: \"POST\",\n  //     headers: {\n  //       \"Content-Type\": \"application/json\",\n  //       \"Accept\": \"application/json\"\n  //     },\n  //     body: JSON.stringify({\n  //       tag: this.state.tag,\n  //       user_id: this.props.currentUser.id,\n  //       beach_id: thisOne.id,\n  //     })\n  //   })\n  //     .then( res => res.json())\n  //     .then( data => {\n  //       console.log(\"back from post tag\", data)\n  //       this.setState({\n  //         tag: \"\",\n  //         allTags: [...this.state.allTags, data]\n  //       }, () => {console.log(\"POSTED TAG\", this.state.allTags)})\n  //     })\n  // }\n\n  ifPhoto = () => {\n    if (this.state.photoInfo){\n      return this.state.photoInfo[0].secure_url\n    } else {\n      return null\n    }\n  }\n\n  postNotes = () => {\n    let thisOne = this.props.allBeaches.find(beach => {\n      return beach.name === this.props.currentBeach.name\n    })\n    this.setState({\n\n    })\n    // perhaps make another function, add Note, that looks through\n    // allNotes and places this newly made note to the tip top\n    // would need at least one arg, the id, to find from the time of\n    // submit to push it up\n    let thisPhoto = this.state.photoInfo[0].secure_url\n    fetch(\"/api/notes\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Accept\": \"application/json\"\n      },\n      body: JSON.stringify({\n        note: this.state.note,\n        user_id: this.props.currentUser.id,\n        beach_id: thisOne.id,\n        photo: this.ifPhoto(),\n      })\n    })\n      .then(res => res.json())\n      .then(data => {\n        // console.log(\"back from post\", data)\n        this.setState({\n          note: \" \",\n          select: false,\n          allNotes: [data, ...this.state.allNotes]\n        }\n        , () => {console.log(\"POSTED NOTE immed\", this.state.allNotes)}\n       )\n        console.log(\"POSTED NOTE\", this.state.allNotes)\n      });\n  }\n\n  componentDidMount() {\n    this.fetchNotes()\n    // this.fetchTags()\n  }\n\n  fetchNotes = () => {\n    let thisOne = this.props.allBeaches.find(beach => {\n      return beach.name === this.props.currentBeach.name\n    })\n    let userID = this.props.currentUser.id\n    console.log(\"userID\", userID)\n    fetch('/api/notes')\n      .then( r => r.json())\n      .then( stuff => {\n        let findFromNotes = stuff.filter( note => {\n          return note.beach_id === thisOne.id && note.user_id === userID})\n        console.log(\"pls\", findFromNotes)\n        // debugger;\n\n\n        this.setState({\n          allNotes: findFromNotes\n        }, () => {console.log(\"fetchNotes\", this.state.allNotes, userID)})\n\n      })\n  }\n  fetchTags = () => {\n    let thisOne = this.props.allBeaches.find(beach => {\n      return beach.name === this.props.currentBeach.name\n    })\n    let userID = this.props.currentUser.id\n    fetch('/api/tags')\n      .then( r => r.json())\n      .then( stuff => {\n        let findFromTags = stuff.filter( tag => {\n          return tag.beach_id === thisOne.id && tag.user_id === userID})\n\n        this.setState({\n          allTags: findFromTags\n        })\n\n      })\n  }\n\n  handleChange = (event) => {\n    this.setState({\n      oneNote: {...this.state.oneNote, [event.target.name]: event.target.value},\n      [event.target.name]: event.target.value,\n      oneTag: {...this.state.oneTag, [event.target.name]: event.target.value},\n    });\n  };\n\n  handleEdit = (thing) => {\n  // console.log(\"one note\", thing, thing.id)\n    this.setState({\n      oneNote: thing,\n      select: true\n    });\n\n  }\n\n  handleDelete = (thing) => {\n  // console.log(\"delete this review\", thing.id)\n   fetch(`/api/notes/${thing.id}`, {\n     method: \"DELETE\",\n   })\n     .then( r => r.json())\n     .then( data => {\n       console.log(\"removed\", data)\n       var newItems = this.state.allNotes.filter((note) => {\n         return note.id !== thing.id});\n     this.setState({ allNotes: newItems });\n     })\n  }\n\n  renderNoteCards = () => {\n    return this.state.allNotes.map( note => {\n      return <NoteCard note={note} key={note.id} handleEdit={this.props.handleEdit} handleDelete={this.props.handleDelete} handleChange={this.props.handleChange} />\n    })\n  }\n\n  setShit = (result) => {\n    this.setState({\n      photoInfo: result,\n      loading: null,\n      idkmydude: \"Photo selected and ready to upload!\"\n\n    })\n  }\n\n  uploadWidget() {\n    this.setState({\n      loading: true,\n    })\n    window.cloudinary.openUploadWidget({ cloud_name: 'dlybpe5za', upload_preset: 'waveson'},\n        (error, result) => {\n            // console.log(result);\n            if (result) {\n              this.setShit(result)\n            }\n\n        });\n      }\n\n      // <input\n      // onChange={this.handleChange}\n      // name=\"tag\"\n      // type=\"text\"\n      // value={this.state.oneTag ? this.state.oneTag.tag : this.state.tag}\n      // placeholder=\"tags\"/>\n      // <Image cloudName=\"dlybpe5za\" publicId=\"sample\" width=\"300\" crop=\"scale\" />\n  render () {\n    // console.log(\"note\", this.state)\n    // console.log(\"note props\", this.props)\n    return (\n      <div className=\"Note-Container\">\n            <div className=\"upload\">\n                <button onClick={this.uploadWidget.bind(this)} className=\"upload-button\">\n                    📷 ADD IMAGE 📸\n                </button>\n\n                {\n                  this.state.idkmydude\n                  ?\n                  this.state.idkmydude\n                  :\n                  null\n                }\n            </div>\n\n        <form className=\"Note-Form\" onSubmit={this.state.handleSubmit}>\n          <br />\n          <textarea\n          id=\"styled\"\n          onChange={this.state.handleChange}\n          name=\"note\"\n          value={this.state.oneNote ? this.state.oneNote.note : this.state.note}\n          rows=\"4\"\n          cols=\"50\"\n          type=\"text\"\n          placeholder=\"Start your entry here!\"/>\n          <input className=\"button\" type=\"submit\" value=\"Submit\" />\n        </form>\n      {\n        this.state.allNotes\n        ?\n        this.renderNoteCards()\n        :\n        <div className=\"Loader\"/>\n      }\n\n      </div>\n    )\n  }\n}\nexport default NoteStuff\n"]},"metadata":{},"sourceType":"module"}